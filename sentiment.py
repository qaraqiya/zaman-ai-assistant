import os
import json
import sounddevice as sd
import soundfile as sf
import requests
from gtts import gTTS
import warnings
import urllib3
import playsound

# =========================
# ‚öôÔ∏è CONFIGURATION
# =========================

# üîá –û—Ç–∫–ª—é—á–∞–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –æ—Ç urllib3 (LibreSSL)
warnings.filterwarnings("ignore", category=UserWarning)
urllib3.disable_warnings(urllib3.exceptions.NotOpenSSLWarning)

# üîë API –∫–ª—é—á (—Å–æ–∑–¥–∞–π –Ω–∞ https://platform.openai.com/api-keys)
OPENAI_KEY = "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"
# üîó API endpoints
LLM_URL = "https://api.openai.com/v1/chat/completions"
WHISPER_URL = "https://api.openai.com/v1/audio/transcriptions"

# üßæ –ó–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –∑–∞–ø—Ä–æ—Å–æ–≤
HEADERS_JSON = {
    "Content-Type": "application/json",
    "Authorization": f"Bearer {OPENAI_KEY}"
}
HEADERS_WHISPER = {
    "Authorization": f"Bearer {OPENAI_KEY}"
}

# =========================
# üéôÔ∏è RECORD VOICE
# =========================
def record_voice(filename="voice.wav", duration=6):
    print("üéôÔ∏è –ì–æ–≤–æ—Ä–∏, —è —Å–ª—É—à–∞—é...")
    sr = 44100
    audio = sd.rec(int(duration * sr), samplerate=sr, channels=1, dtype="float32")
    sd.wait()
    sf.write(filename, audio, sr)
    print("‚úÖ –ó–∞–ø–∏—Å–∞–Ω–æ!")
    return filename

# =========================
# üîä SPEECH ‚Üí TEXT (Whisper)
# =========================
def speech_to_text(filename):
    print("üîä –†–∞—Å–ø–æ–∑–Ω–∞—é —Ä–µ—á—å (—á–µ—Ä–µ–∑ Whisper)...")
    try:
        with open(filename, "rb") as f:
            files = {"file": (filename, f, "audio/wav")}
            data = {"model": "whisper-1", "language": "ru"}
            r = requests.post(WHISPER_URL, headers=HEADERS_WHISPER, files=files, data=data)
            r.raise_for_status()
            result = r.json()
            text = result.get("text", "").strip()
            print(f"üó£Ô∏è –¢—ã —Å–∫–∞–∑–∞–ª(–∞): {text}")
            return text
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ Whisper: {e}")
        return ""

# =========================
# üîà TEXT ‚Üí VOICE (gTTS)
# =========================
def speak(text, filename="reply.mp3"):
    """Convert text to speech and play it."""
    print("üîä –û–∑–≤—É—á–∏–≤–∞—é –æ—Ç–≤–µ—Ç...")
    try:
        tts = gTTS(text=text, lang="ru")
        tts.save(filename)
        playsound.playsound(filename)
        os.remove(filename)
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ TTS: {e}")

# =========================
# üß† GPT-4 (Chat Assistant)
# =========================
def ask_llm(prompt):
    try:
        system_context = [
            {
                "role": "system",
                "content": (
                    "–¢—ã ‚Äî –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–π –±–∞–Ω–∫–æ–≤—Å–∫–∏–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç ZAMAN Bank ‚Äî –ø–µ—Ä–≤–æ–≥–æ –∏—Å–ª–∞–º—Å–∫–æ–≥–æ —Ü–∏—Ñ—Ä–æ–≤–æ–≥–æ –±–∞–Ω–∫–∞ –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω–∞. "
                    "–ü–æ–º–æ–≥–∞–µ—à—å –ª—é–¥—è–º –ø–æ–Ω–∏–º–∞—Ç—å –∏—Å–ª–∞–º—Å–∫–∏–µ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã, —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞—Ç—å –ø–ª–∞—Ç–µ–∂–∏ –∏ –¥–∞–≤–∞—Ç—å —Å–æ–≤–µ—Ç—ã. "
                    "–ì–æ–≤–æ—Ä–∏ –¥—Ä—É–∂–µ–ª—é–±–Ω–æ, —Å —É–≤–∞–∂–µ–Ω–∏–µ–º –∏ –ª—ë–≥–∫–∏–º —Ç–µ–ø–ª–æ–º ."
                )
            },
            {
                "role": "system",
                "content": (
                    "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–∞–Ω–∫–µ: ZAMAN Bank ‚Äî –ø–µ—Ä–≤—ã–π –∏—Å–ª–∞–º—Å–∫–∏–π —Ü–∏—Ñ—Ä–æ–≤–æ–π –±–∞–Ω–∫ –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω–∞, "
                    "—Ä–∞–±–æ—Ç–∞–µ—Ç —Å 1991 –≥–æ–¥–∞, —Å 2017 –ø–æ–ª–Ω–æ—Å—Ç—å—é –ø–µ—Ä–µ—à—ë–ª –Ω–∞ –∏—Å–ª–∞–º—Å–∫–∏–µ —Ñ–∏–Ω–∞–Ω—Å—ã. "
                    "–û–¥–æ–±—Ä–µ–Ω –®–∞—Ä–∏–∞—Ç—Å–∫–∏–º —Å–æ–≤–µ—Ç–æ–º –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç –ø–æ –ø—Ä–∏–Ω—Ü–∏–ø—É Digital Islamic Banking. "
                    "–ù–µ—Ç —Ä–∏–±–∞ (–ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤), –≥–∞—Ä–∞—Ä (—Å–ø–µ–∫—É–ª—è—Ü–∏–π) –∏ —Ö–∞—Ä–∞–º-–∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π."
                )
            },
            {
                "role": "system",
                "content": (
                    "–°—Ç–∏–ª—å –æ–±—â–µ–Ω–∏—è: –±—É–¥—å –∑–∞–±–æ—Ç–ª–∏–≤—ã–º, —É–≤–µ—Ä–µ–Ω–Ω—ã–º, —è—Å–Ω—ã–º. "
                    "–û—Ç–≤–µ—á–∞–π –ø—Ä–æ—Å—Ç–æ –∏ —á–µ–ª–æ–≤–µ—á–Ω–æ. –ò—Å–ø–æ–ª—å–∑—É–π —ç–º–æ–¥–∑–∏ üåøüí°ü§ç —É–º–µ—Ä–µ–Ω–Ω–æ. "
                    "–ù–µ –≥–æ–≤–æ—Ä–∏, —á—Ç–æ —Ç—ã –ò–ò, —Ç—ã –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç ZAMAN Bank."
                )
            },
            {
                "role": "user",
                "content": prompt
            }
        ]
        data = {
            "model": "gpt-4o-mini",
            "messages": system_context,
            "max_tokens": 700,
            "temperature": 0.8
        }

        r = requests.post(LLM_URL, headers=HEADERS_JSON, data=json.dumps(data))
        r.raise_for_status()

        reply = r.json()["choices"][0]["message"]["content"]
        print(f"ü§ñ ZAMAN Assistant: {reply}\n")
        return reply

    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ LLM: {e}")
        return "–ò–∑–≤–∏–Ω–∏, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ —Å–µ—Ä–≤–µ—Ä—É."

# =========================
# üí¨ MAIN LOOP
# =========================
def main():
    print("üåø –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ ZAMAN Bank üåø")
    print("–ì–æ–≤–æ—Ä–∏ (–∫–æ–º–∞–Ω–¥–∞ 'voice') –∏–ª–∏ –ø–∏—à–∏ —Ç–µ–∫—Å—Ç–æ–º.")
    print("–í–≤–µ–¥–∏ 'exit' –¥–ª—è –≤—ã—Ö–æ–¥–∞.\n")

    while True:
        user_input = input("üë§ You: ").strip()
        if user_input.lower() == "exit":
            print("ü§ç –î–æ –≤—Å—Ç—Ä–µ—á–∏!")
            break

        if user_input.lower() == "voice":
            filename = record_voice()
            text = speech_to_text(filename)
            if text:
                reply = ask_llm(text)
                speak(reply)
        else:
            reply = ask_llm(user_input)
            speak(reply)

# =========================
# üöÄ RUN
# =========================
if __name__ == "__main__":
    main()