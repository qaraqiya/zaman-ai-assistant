import os
import json
import sounddevice as sd
import soundfile as sf
import requests
from gtts import gTTS
import playsound
import warnings
import urllib3

# =========================
# ‚öôÔ∏è CONFIGURATION
# =========================
warnings.filterwarnings("ignore", category=UserWarning)
urllib3.disable_warnings(urllib3.exceptions.NotOpenSSLWarning)

OPENAI_KEY = "key"  # —Ç–≤–æ–π –∫–ª—é—á —Å—é–¥–∞
LLM_URL = "https://api.openai.com/v1/chat/completions"
WHISPER_URL = "https://api.openai.com/v1/audio/transcriptions"

HEADERS_JSON = {
    "Content-Type": "application/json",
    "Authorization": f"Bearer {OPENAI_KEY}"
}
HEADERS_WHISPER = {"Authorization": f"Bearer {OPENAI_KEY}"}

# =========================
# üéô RECORD VOICE
# =========================
def record_voice(filename="voice.wav", duration=6):
    print("üéôÔ∏è –ì–æ–≤–æ—Ä–∏, —è —Å–ª—É—à–∞—é...")
    sr = 44100
    audio = sd.rec(int(duration * sr), samplerate=sr, channels=1, dtype="float32")
    sd.wait()
    sf.write(filename, audio, sr)
    print("‚úÖ –ó–∞–ø–∏—Å–∞–Ω–æ!")
    return filename

# =========================
# üîä SPEECH ‚Üí TEXT
# =========================
def speech_to_text(filename):
    print("üîä –†–∞—Å–ø–æ–∑–Ω–∞—é —Ä–µ—á—å...")
    try:
        with open(filename, "rb") as f:
            files = {"file": (filename, f, "audio/wav")}
            data = {"model": "whisper-1", "language": "ru"}
            r = requests.post(WHISPER_URL, headers=HEADERS_WHISPER, files=files, data=data)
            r.raise_for_status()
            return r.json().get("text", "").strip()
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ Whisper: {e}")
        return ""

# =========================
# üîà TEXT ‚Üí VOICE
# =========================
def speak(text, filename="reply.mp3"):
    print("üîä –û–∑–≤—É—á–∏–≤–∞—é –æ—Ç–≤–µ—Ç...")
    try:
        tts = gTTS(text=text, lang="ru")
        tts.save(filename)
        playsound.playsound(filename)
        os.remove(filename)
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ TTS: {e}")

# =========================
# üß† ASK GPT
# =========================
def ask_llm(prompt):
    try:
        messages = [
            {
                "role": "system",
                "content": (
                    "–¢—ã ‚Äî –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç ZAMAN Bank üåø "
                    "–ì–æ–≤–æ—Ä–∏ —Å–ø–æ–∫–æ–π–Ω–æ, –¥—Ä—É–∂–µ–ª—é–±–Ω–æ –∏ —Å —É–≤–∞–∂–µ–Ω–∏–µ–º. "
                    "–ù–µ –Ω–∞–∑—ã–≤–∞–π —Å–µ–±—è –ò–ò, —Ç—ã –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç –±–∞–Ω–∫–∞."
                )
            },
            {"role": "user", "content": prompt}
        ]
        data = {
            "model": "gpt-4o-mini",
            "messages": messages,
            "max_tokens": 700,
            "temperature": 0.8
        }
        r = requests.post(LLM_URL, headers=HEADERS_JSON, data=json.dumps(data))
        r.raise_for_status()
        return r.json()["choices"][0]["message"]["content"]
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ LLM: {e}")
        return "–ò–∑–≤–∏–Ω–∏, –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ —Å–µ—Ä–≤–µ—Ä—É."
